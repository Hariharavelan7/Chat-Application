{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n    // Create a unique socket connection for each tab\n    const sessionId = sessionStorage.getItem('sessionId') || 'default';\n    this.socket = io('http://localhost:3000', {\n      query: {\n        sessionId\n      }\n    });\n    // Add connection debugging\n    this.socket.on('connect', () => {\n      console.log('Socket connected:', this.socket.id, 'Session:', sessionId);\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n    });\n  }\n  getAllUsers() {\n    return this.http.get(`${this.apiUrl}/users`);\n  }\n  getMessages(userId1, userId2) {\n    return this.http.get(`${this.apiUrl}/messages/${userId1}/${userId2}`);\n  }\n  // Socket.IO methods\n  joinChat(userId) {\n    this.socket.emit('join', {\n      userId\n    });\n  }\n  sendMessage(content, senderId, receiverId) {\n    this.socket.emit('sendMessage', {\n      content,\n      senderId,\n      receiverId\n    });\n  }\n  onNewMessage() {\n    return new Observable(observer => {\n      this.socket.on('newMessage', message => {\n        console.log('Socket received newMessage:', message);\n        observer.next(message);\n      });\n    });\n  }\n  onMessageSent() {\n    return new Observable(observer => {\n      this.socket.on('messageSent', message => {\n        console.log('Socket received messageSent:', message);\n        observer.next(message);\n      });\n    });\n  }\n  onMessages() {\n    return new Observable(observer => {\n      this.socket.on('messages', messages => {\n        observer.next(messages);\n      });\n    });\n  }\n  onError() {\n    return new Observable(observer => {\n      this.socket.on('error', error => {\n        observer.next(error);\n      });\n    });\n  }\n  getMessagesFromSocket(userId1, userId2) {\n    this.socket.emit('getMessages', {\n      userId1,\n      userId2\n    });\n  }\n  disconnect() {\n    this.socket.disconnect();\n  }\n  static {\n    this.ɵfac = function ChatService_Factory(t) {\n      return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ChatService,\n      factory: ChatService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Observable","io","ChatService","constructor","http","apiUrl","sessionId","sessionStorage","getItem","socket","query","on","console","log","id","error","getAllUsers","get","getMessages","userId1","userId2","joinChat","userId","emit","sendMessage","content","senderId","receiverId","onNewMessage","observer","message","next","onMessageSent","onMessages","messages","onError","getMessagesFromSocket","disconnect","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/var/www/html/chat-applictaion/frontend/src/app/services/chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { io, Socket } from 'socket.io-client';\n\nexport interface Message {\n  id: number;\n  content: string;\n  senderId: number;\n  receiverId: number;\n  createdAt: string;\n}\n\nexport interface User {\n  id: number;\n  email: string;\n  name: string;\n  createdAt: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  private apiUrl = 'http://localhost:3000';\n  private socket: Socket;\n\n  constructor(private http: HttpClient) {\n    // Create a unique socket connection for each tab\n    const sessionId = sessionStorage.getItem('sessionId') || 'default';\n    this.socket = io('http://localhost:3000', {\n      query: { sessionId }\n    });\n    \n    // Add connection debugging\n    this.socket.on('connect', () => {\n      console.log('Socket connected:', this.socket.id, 'Session:', sessionId);\n    });\n    \n    this.socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n    \n    this.socket.on('connect_error', (error) => {\n      console.error('Socket connection error:', error);\n    });\n  }\n\n  getAllUsers(): Observable<User[]> {\n    return this.http.get<User[]>(`${this.apiUrl}/users`);\n  }\n\n  getMessages(userId1: number, userId2: number): Observable<Message[]> {\n    return this.http.get<Message[]>(`${this.apiUrl}/messages/${userId1}/${userId2}`);\n  }\n\n  // Socket.IO methods\n  joinChat(userId: number): void {\n    this.socket.emit('join', { userId });\n  }\n\n  sendMessage(content: string, senderId: number, receiverId: number): void {\n    this.socket.emit('sendMessage', { content, senderId, receiverId });\n  }\n\n  onNewMessage(): Observable<Message> {\n    return new Observable(observer => {\n      this.socket.on('newMessage', (message: Message) => {\n        console.log('Socket received newMessage:', message);\n        observer.next(message);\n      });\n    });\n  }\n\n  onMessageSent(): Observable<Message> {\n    return new Observable(observer => {\n      this.socket.on('messageSent', (message: Message) => {\n        console.log('Socket received messageSent:', message);\n        observer.next(message);\n      });\n    });\n  }\n\n  onMessages(): Observable<Message[]> {\n    return new Observable(observer => {\n      this.socket.on('messages', (messages: Message[]) => {\n        observer.next(messages);\n      });\n    });\n  }\n\n  onError(): Observable<{ message: string }> {\n    return new Observable(observer => {\n      this.socket.on('error', (error: { message: string }) => {\n        observer.next(error);\n      });\n    });\n  }\n\n  getMessagesFromSocket(userId1: number, userId2: number): void {\n    this.socket.emit('getMessages', { userId1, userId2 });\n  }\n\n  disconnect(): void {\n    this.socket.disconnect();\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}