{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      this.currentUserSubject.next(JSON.parse(user));\n    }\n  }\n  register(email, password, name) {\n    return this.http.post(`${this.apiUrl}/auth/register`, {\n      email,\n      password,\n      name\n    }).pipe(tap(response => {\n      this.setUser(response);\n    }));\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/auth/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      this.setUser(response);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  setUser(response) {\n    localStorage.setItem('token', response.access_token);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    this.currentUserSubject.next(response.user);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","token","localStorage","getItem","user","next","JSON","parse","register","email","password","name","post","pipe","response","setUser","login","logout","removeItem","getCurrentUser","value","isLoggedIn","getToken","setItem","access_token","stringify","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/var/www/html/chat-applictaion/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nexport interface User {\n  id: number;\n  email: string;\n  name: string;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  user: User;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    // Check if user is already logged in\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      this.currentUserSubject.next(JSON.parse(user));\n    }\n  }\n\n  register(email: string, password: string, name: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/register`, {\n      email,\n      password,\n      name\n    }).pipe(\n      tap(response => {\n        this.setUser(response);\n      })\n    );\n  }\n\n  login(email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/login`, {\n      email,\n      password\n    }).pipe(\n      tap(response => {\n        this.setUser(response);\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  private setUser(response: AuthResponse): void {\n    localStorage.setItem('token', response.access_token);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    this.currentUserSubject.next(response.user);\n  }\n}\n\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAgBpC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,uBAAuB;IAChC,KAAAC,kBAAkB,GAAG,IAAIN,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAO,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,IAAIF,KAAK,IAAIG,IAAI,EAAE;MACjB,IAAI,CAACN,kBAAkB,CAACO,IAAI,CAACC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,CAAC;;EAElD;EAEAI,QAAQA,CAACC,KAAa,EAAEC,QAAgB,EAAEC,IAAY;IACpD,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAe,GAAG,IAAI,CAACf,MAAM,gBAAgB,EAAE;MAClEY,KAAK;MACLC,QAAQ;MACRC;KACD,CAAC,CAACE,IAAI,CACLpB,GAAG,CAACqB,QAAQ,IAAG;MACb,IAAI,CAACC,OAAO,CAACD,QAAQ,CAAC;IACxB,CAAC,CAAC,CACH;EACH;EAEAE,KAAKA,CAACP,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACd,IAAI,CAACgB,IAAI,CAAe,GAAG,IAAI,CAACf,MAAM,aAAa,EAAE;MAC/DY,KAAK;MACLC;KACD,CAAC,CAACG,IAAI,CACLpB,GAAG,CAACqB,QAAQ,IAAG;MACb,IAAI,CAACC,OAAO,CAACD,QAAQ,CAAC;IACxB,CAAC,CAAC,CACH;EACH;EAEAG,MAAMA,CAAA;IACJf,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAChChB,YAAY,CAACgB,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACpB,kBAAkB,CAACO,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAc,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACrB,kBAAkB,CAACsB,KAAK;EACtC;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAACnB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAmB,QAAQA,CAAA;IACN,OAAOpB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEQY,OAAOA,CAACD,QAAsB;IACpCZ,YAAY,CAACqB,OAAO,CAAC,OAAO,EAAET,QAAQ,CAACU,YAAY,CAAC;IACpDtB,YAAY,CAACqB,OAAO,CAAC,MAAM,EAAEjB,IAAI,CAACmB,SAAS,CAACX,QAAQ,CAACV,IAAI,CAAC,CAAC;IAC3D,IAAI,CAACN,kBAAkB,CAACO,IAAI,CAACS,QAAQ,CAACV,IAAI,CAAC;EAC7C;;;uBA3DWV,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXnC,WAAW;MAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}