{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"../services/chat.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction ChatComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \"Loading users...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChatComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"click\", function ChatComponent_div_13_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const user_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.selectUser(user_r4));\n    });\n    i0.ɵɵelementStart(1, \"div\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 13);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", (ctx_r1.selectedUser == null ? null : ctx_r1.selectedUser.id) === user_r4.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r4.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r4.email);\n  }\n}\nfunction ChatComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"div\", 15)(2, \"h4\");\n    i0.ɵɵtext(3, \"Select a user to start chatting\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \"Choose someone from the user list to begin your conversation\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ChatComponent_div_16_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" No messages yet. Start the conversation! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChatComponent_div_16_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27)(1, \"div\", 28);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 29);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"sent\", message_r10.senderId === (ctx_r9.currentUser == null ? null : ctx_r9.currentUser.id))(\"received\", message_r10.senderId !== (ctx_r9.currentUser == null ? null : ctx_r9.currentUser.id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r10.content);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.formatTime(message_r10.createdAt), \" \");\n  }\n}\nfunction ChatComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17)(2, \"h5\", 18);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"small\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 19, 20);\n    i0.ɵɵtemplate(8, ChatComponent_div_16_div_8_Template, 2, 0, \"div\", 21);\n    i0.ɵɵtemplate(9, ChatComponent_div_16_div_9_Template, 5, 6, \"div\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 23)(11, \"div\", 24)(12, \"input\", 25);\n    i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_div_16_Template_input_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.newMessage = $event);\n    })(\"keyup.enter\", function ChatComponent_div_16_Template_input_keyup_enter_12_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.sendMessage());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function ChatComponent_div_16_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.sendMessage());\n    });\n    i0.ɵɵtext(14, \" Send \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Chatting with \", ctx_r3.selectedUser.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.selectedUser.email);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.messages.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.messages);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newMessage)(\"disabled\", !ctx_r3.selectedUser);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r3.newMessage.trim() || !ctx_r3.selectedUser);\n  }\n}\nexport class ChatComponent {\n  constructor(authService, chatService) {\n    this.authService = authService;\n    this.chatService = chatService;\n    this.currentUser = null;\n    this.users = [];\n    this.selectedUser = null;\n    this.messages = [];\n    this.newMessage = '';\n    this.subscriptions = [];\n  }\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n    if (this.currentUser) {\n      // Join chat\n      this.chatService.joinChat(this.currentUser.id);\n      // Load users\n      this.loadUsers();\n      // Set up socket listeners\n      this.setupSocketListeners();\n    }\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.chatService.disconnect();\n  }\n  loadUsers() {\n    const sub = this.chatService.getAllUsers().subscribe({\n      next: users => {\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\n      },\n      error: error => {\n        console.error('Error loading users:', error);\n      }\n    });\n    this.subscriptions.push(sub);\n  }\n  setupSocketListeners() {\n    // Listen for new messages\n    const newMessageSub = this.chatService.onNewMessage().subscribe(message => {\n      if (this.selectedUser && (message.senderId === this.currentUser?.id && message.receiverId === this.selectedUser.id || message.senderId === this.selectedUser.id && message.receiverId === this.currentUser?.id)) {\n        this.messages.push(message);\n        this.scrollToBottom();\n      }\n    });\n    this.subscriptions.push(newMessageSub);\n    // Listen for message sent confirmation\n    const messageSentSub = this.chatService.onMessageSent().subscribe(message => {\n      this.messages.push(message);\n      this.scrollToBottom();\n    });\n    this.subscriptions.push(messageSentSub);\n    // Listen for error messages\n    const errorSub = this.chatService.onError().subscribe(error => {\n      console.error('Socket error:', error);\n    });\n    this.subscriptions.push(errorSub);\n  }\n  selectUser(user) {\n    this.selectedUser = user;\n    this.messages = [];\n    this.newMessage = '';\n    if (this.currentUser) {\n      this.chatService.getMessagesFromSocket(this.currentUser.id, user.id);\n      // Listen for messages response\n      const messagesSub = this.chatService.onMessages().subscribe(messages => {\n        this.messages = messages;\n        this.scrollToBottom();\n      });\n      this.subscriptions.push(messagesSub);\n    }\n  }\n  sendMessage() {\n    if (this.newMessage.trim() && this.selectedUser && this.currentUser) {\n      this.chatService.sendMessage(this.newMessage.trim(), this.currentUser.id, this.selectedUser.id);\n      this.newMessage = '';\n    }\n  }\n  logout() {\n    this.authService.logout();\n  }\n  formatTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n  scrollToBottom() {\n    setTimeout(() => {\n      const messagesContainer = document.querySelector('.chat-messages');\n      if (messagesContainer) {\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n      }\n    }, 100);\n  }\n  static {\n    this.ɵfac = function ChatComponent_Factory(t) {\n      return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.ChatService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatComponent,\n      selectors: [[\"app-chat\"]],\n      decls: 17,\n      vars: 5,\n      consts: [[1, \"chat-container\"], [1, \"chat-header\"], [1, \"btn\", \"btn-secondary\", \"btn-sm\", \"ms-3\", 3, \"click\"], [1, \"d-flex\", \"flex-grow-1\"], [1, \"user-list\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [\"class\", \"user-item\", 3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"flex-grow-1\", \"d-flex\", \"flex-column\"], [\"class\", \"d-flex align-items-center justify-content-center h-100\", 4, \"ngIf\"], [\"class\", \"d-flex flex-column h-100\", 4, \"ngIf\"], [1, \"text-muted\"], [1, \"user-item\", 3, \"click\"], [1, \"fw-bold\"], [1, \"small\", \"text-muted\"], [1, \"d-flex\", \"align-items-center\", \"justify-content-center\", \"h-100\"], [1, \"text-center\", \"text-muted\"], [1, \"d-flex\", \"flex-column\", \"h-100\"], [1, \"bg-light\", \"p-3\", \"border-bottom\"], [1, \"mb-0\"], [1, \"chat-messages\"], [\"messagesContainer\", \"\"], [\"class\", \"text-center text-muted\", 4, \"ngIf\"], [\"class\", \"message\", 3, \"sent\", \"received\", 4, \"ngFor\", \"ngForOf\"], [1, \"message-input\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Type your message...\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [1, \"message\"], [1, \"message-content\"], [1, \"message-time\", \"small\", \"text-muted\"]],\n      template: function ChatComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\");\n          i0.ɵɵtext(3, \"Chat Application\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\");\n          i0.ɵɵtext(5);\n          i0.ɵɵelementStart(6, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_6_listener() {\n            return ctx.logout();\n          });\n          i0.ɵɵtext(7, \"Logout\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"div\", 3)(9, \"div\", 4)(10, \"h5\");\n          i0.ɵɵtext(11, \"Users\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(12, ChatComponent_div_12_Template, 2, 0, \"div\", 5);\n          i0.ɵɵtemplate(13, ChatComponent_div_13_Template, 5, 4, \"div\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 7);\n          i0.ɵɵtemplate(15, ChatComponent_div_15_Template, 6, 0, \"div\", 8);\n          i0.ɵɵtemplate(16, ChatComponent_div_16_Template, 15, 7, \"div\", 9);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" Welcome, \", ctx.currentUser == null ? null : ctx.currentUser.name, \"! \");\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.users.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.users);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.selectedUser);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedUser);\n        }\n      },\n      dependencies: [i3.NgForOf, i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ChatComponent_div_13_Template_div_click_0_listener","restoredCtx","ɵɵrestoreView","_r6","user_r4","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","selectUser","ɵɵclassProp","ctx_r1","selectedUser","id","ɵɵadvance","ɵɵtextInterpolate","name","email","message_r10","senderId","ctx_r9","currentUser","content","ɵɵtextInterpolate1","formatTime","createdAt","ɵɵtemplate","ChatComponent_div_16_div_8_Template","ChatComponent_div_16_div_9_Template","ChatComponent_div_16_Template_input_ngModelChange_12_listener","$event","_r12","ctx_r11","newMessage","ChatComponent_div_16_Template_input_keyup_enter_12_listener","ctx_r13","sendMessage","ChatComponent_div_16_Template_button_click_13_listener","ctx_r14","ctx_r3","ɵɵproperty","messages","length","trim","ChatComponent","constructor","authService","chatService","users","subscriptions","ngOnInit","getCurrentUser","joinChat","loadUsers","setupSocketListeners","ngOnDestroy","forEach","sub","unsubscribe","disconnect","getAllUsers","subscribe","next","filter","user","error","console","push","newMessageSub","onNewMessage","message","receiverId","scrollToBottom","messageSentSub","onMessageSent","errorSub","onError","getMessagesFromSocket","messagesSub","onMessages","logout","dateString","date","Date","toLocaleTimeString","hour","minute","setTimeout","messagesContainer","document","querySelector","scrollTop","scrollHeight","ɵɵdirectiveInject","i1","AuthService","i2","ChatService","selectors","decls","vars","consts","template","ChatComponent_Template","rf","ctx","ChatComponent_Template_button_click_6_listener","ChatComponent_div_12_Template","ChatComponent_div_13_Template","ChatComponent_div_15_Template","ChatComponent_div_16_Template"],"sources":["/var/www/html/chat-applictaion/frontend/src/app/chat/chat.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService, User } from '../services/auth.service';\nimport { ChatService, Message } from '../services/chat.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-chat',\n  template: `\n    <div class=\"chat-container\">\n      <div class=\"chat-header\">\n        <h3>Chat Application</h3>\n        <div>\n          Welcome, {{ currentUser?.name }}!\n          <button class=\"btn btn-secondary btn-sm ms-3\" (click)=\"logout()\">Logout</button>\n        </div>\n      </div>\n      \n      <div class=\"d-flex flex-grow-1\">\n        <!-- User List -->\n        <div class=\"user-list\">\n          <h5>Users</h5>\n          <div *ngIf=\"users.length === 0\" class=\"text-muted\">Loading users...</div>\n          <div\n            *ngFor=\"let user of users\"\n            class=\"user-item\"\n            [class.active]=\"selectedUser?.id === user.id\"\n            (click)=\"selectUser(user)\"\n          >\n            <div class=\"fw-bold\">{{ user.name }}</div>\n            <div class=\"small text-muted\">{{ user.email }}</div>\n          </div>\n        </div>\n\n        <!-- Chat Area -->\n        <div class=\"flex-grow-1 d-flex flex-column\">\n          <div *ngIf=\"!selectedUser\" class=\"d-flex align-items-center justify-content-center h-100\">\n            <div class=\"text-center text-muted\">\n              <h4>Select a user to start chatting</h4>\n              <p>Choose someone from the user list to begin your conversation</p>\n            </div>\n          </div>\n\n          <div *ngIf=\"selectedUser\" class=\"d-flex flex-column h-100\">\n            <!-- Chat Header -->\n            <div class=\"bg-light p-3 border-bottom\">\n              <h5 class=\"mb-0\">Chatting with {{ selectedUser.name }}</h5>\n              <small class=\"text-muted\">{{ selectedUser.email }}</small>\n            </div>\n\n            <!-- Messages -->\n            <div class=\"chat-messages\" #messagesContainer>\n              <div *ngIf=\"messages.length === 0\" class=\"text-center text-muted\">\n                No messages yet. Start the conversation!\n              </div>\n              <div\n                *ngFor=\"let message of messages\"\n                class=\"message\"\n                [class.sent]=\"message.senderId === currentUser?.id\"\n                [class.received]=\"message.senderId !== currentUser?.id\"\n              >\n                <div class=\"message-content\">{{ message.content }}</div>\n                <div class=\"message-time small text-muted\">\n                  {{ formatTime(message.createdAt) }}\n                </div>\n              </div>\n            </div>\n\n            <!-- Message Input -->\n            <div class=\"message-input\">\n              <div class=\"input-group\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Type your message...\"\n                  [(ngModel)]=\"newMessage\"\n                  (keyup.enter)=\"sendMessage()\"\n                  [disabled]=\"!selectedUser\"\n                />\n                <button\n                  class=\"btn btn-primary\"\n                  type=\"button\"\n                  (click)=\"sendMessage()\"\n                  [disabled]=\"!newMessage.trim() || !selectedUser\"\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: []\n})\nexport class ChatComponent implements OnInit, OnDestroy {\n  currentUser: User | null = null;\n  users: User[] = [];\n  selectedUser: User | null = null;\n  messages: Message[] = [];\n  newMessage = '';\n  \n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private authService: AuthService,\n    private chatService: ChatService\n  ) {}\n\n  ngOnInit(): void {\n    this.currentUser = this.authService.getCurrentUser();\n    \n    if (this.currentUser) {\n      // Join chat\n      this.chatService.joinChat(this.currentUser.id);\n      \n      // Load users\n      this.loadUsers();\n      \n      // Set up socket listeners\n      this.setupSocketListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.chatService.disconnect();\n  }\n\n  private loadUsers(): void {\n    const sub = this.chatService.getAllUsers().subscribe({\n      next: (users) => {\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\n      },\n      error: (error) => {\n        console.error('Error loading users:', error);\n      }\n    });\n    this.subscriptions.push(sub);\n  }\n\n  private setupSocketListeners(): void {\n    // Listen for new messages\n    const newMessageSub = this.chatService.onNewMessage().subscribe((message: Message) => {\n      if (this.selectedUser && \n          ((message.senderId === this.currentUser?.id && message.receiverId === this.selectedUser.id) ||\n           (message.senderId === this.selectedUser.id && message.receiverId === this.currentUser?.id))) {\n        this.messages.push(message);\n        this.scrollToBottom();\n      }\n    });\n    this.subscriptions.push(newMessageSub);\n\n    // Listen for message sent confirmation\n    const messageSentSub = this.chatService.onMessageSent().subscribe((message: Message) => {\n      this.messages.push(message);\n      this.scrollToBottom();\n    });\n    this.subscriptions.push(messageSentSub);\n\n    // Listen for error messages\n    const errorSub = this.chatService.onError().subscribe((error) => {\n      console.error('Socket error:', error);\n    });\n    this.subscriptions.push(errorSub);\n  }\n\n  selectUser(user: User): void {\n    this.selectedUser = user;\n    this.messages = [];\n    this.newMessage = '';\n    \n    if (this.currentUser) {\n      this.chatService.getMessagesFromSocket(this.currentUser.id, user.id);\n      \n      // Listen for messages response\n      const messagesSub = this.chatService.onMessages().subscribe((messages: Message[]) => {\n        this.messages = messages;\n        this.scrollToBottom();\n      });\n      this.subscriptions.push(messagesSub);\n    }\n  }\n\n  sendMessage(): void {\n    if (this.newMessage.trim() && this.selectedUser && this.currentUser) {\n      this.chatService.sendMessage(\n        this.newMessage.trim(),\n        this.currentUser.id,\n        this.selectedUser.id\n      );\n      this.newMessage = '';\n    }\n  }\n\n  logout(): void {\n    this.authService.logout();\n  }\n\n  formatTime(dateString: string): string {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n\n  private scrollToBottom(): void {\n    setTimeout(() => {\n      const messagesContainer = document.querySelector('.chat-messages');\n      if (messagesContainer) {\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n      }\n    }, 100);\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}