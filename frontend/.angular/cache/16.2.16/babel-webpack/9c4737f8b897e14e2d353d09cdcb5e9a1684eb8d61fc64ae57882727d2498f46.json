{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"../services/chat.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction ChatComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \"Loading users...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChatComponent_div_13_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.unreadCounts[user_r4.id], \" \");\n  }\n}\nfunction ChatComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"click\", function ChatComponent_div_13_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const user_r4 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.selectUser(user_r4));\n    });\n    i0.ɵɵelementStart(1, \"div\", 12)(2, \"div\")(3, \"div\", 13);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 14);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, ChatComponent_div_13_div_7_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", (ctx_r1.selectedUser == null ? null : ctx_r1.selectedUser.id) === user_r4.id);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(user_r4.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r4.email);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.unreadCounts[user_r4.id] > 0);\n  }\n}\nfunction ChatComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 18)(2, \"h4\");\n    i0.ɵɵtext(3, \"Select a user to start chatting\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \"Choose someone from the user list to begin your conversation\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ChatComponent_div_16_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1, \" No messages yet. Start the conversation! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChatComponent_div_16_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"div\", 31);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 32);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r12 = ctx.$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"sent\", message_r12.senderId === (ctx_r11.currentUser == null ? null : ctx_r11.currentUser.id))(\"received\", message_r12.senderId !== (ctx_r11.currentUser == null ? null : ctx_r11.currentUser.id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r12.content);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r11.formatTime(message_r12.createdAt), \" \");\n  }\n}\nfunction ChatComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20)(2, \"h5\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"small\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 22, 23);\n    i0.ɵɵtemplate(8, ChatComponent_div_16_div_8_Template, 2, 0, \"div\", 24);\n    i0.ɵɵtemplate(9, ChatComponent_div_16_div_9_Template, 5, 6, \"div\", 25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 26)(11, \"div\", 27)(12, \"input\", 28);\n    i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_div_16_Template_input_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.newMessage = $event);\n    })(\"keyup.enter\", function ChatComponent_div_16_Template_input_keyup_enter_12_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.sendMessage());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function ChatComponent_div_16_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.sendMessage());\n    });\n    i0.ɵɵtext(14, \" Send \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Chatting with \", ctx_r3.selectedUser.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.selectedUser.email);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.messages.length === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.messages);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.newMessage)(\"disabled\", !ctx_r3.selectedUser);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r3.newMessage.trim() || !ctx_r3.selectedUser);\n  }\n}\nexport class ChatComponent {\n  constructor(authService, chatService, router) {\n    this.authService = authService;\n    this.chatService = chatService;\n    this.router = router;\n    this.currentUser = null;\n    this.users = [];\n    this.selectedUser = null;\n    this.messages = [];\n    this.newMessage = '';\n    this.unreadCounts = {};\n    this.subscriptions = [];\n  }\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n    if (this.currentUser) {\n      // Join chat\n      this.chatService.joinChat(this.currentUser.id);\n      // Set up socket listeners\n      this.setupSocketListeners();\n      // Load users (this will also restore last selected user)\n      this.loadUsers();\n      // Load unread counts\n      this.loadUnreadCounts();\n    }\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.chatService.disconnect();\n  }\n  loadUsers() {\n    const sub = this.chatService.getAllUsers().subscribe({\n      next: users => {\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\n        // After users are loaded, try to restore last selected user\n        this.restoreLastSelectedUser();\n      },\n      error: error => {\n        console.error('Error loading users:', error);\n      }\n    });\n    this.subscriptions.push(sub);\n  }\n  loadUnreadCounts() {\n    const sub = this.chatService.getUnreadCounts().subscribe({\n      next: counts => {\n        console.log('Loaded unread counts:', counts);\n        this.unreadCounts = counts;\n      },\n      error: error => {\n        console.error('Error loading unread counts:', error);\n      }\n    });\n    this.subscriptions.push(sub);\n  }\n  setupSocketListeners() {\n    console.log('Setting up socket listeners for user:', this.currentUser?.id);\n    // Listen for new messages (from other users)\n    const newMessageSub = this.chatService.onNewMessage().subscribe(message => {\n      console.log('Received new message:', message);\n      if (this.selectedUser && (message.senderId === this.currentUser?.id && message.receiverId === this.selectedUser.id || message.senderId === this.selectedUser.id && message.receiverId === this.currentUser?.id)) {\n        console.log('Adding message to chat:', message);\n        this.messages.push(message);\n        this.scrollToBottom();\n      }\n    });\n    this.subscriptions.push(newMessageSub);\n    // Listen for message sent confirmation (our own messages)\n    const messageSentSub = this.chatService.onMessageSent().subscribe(message => {\n      console.log('Message sent confirmation:', message);\n      if (this.selectedUser && (message.senderId === this.currentUser?.id && message.receiverId === this.selectedUser.id || message.senderId === this.selectedUser.id && message.receiverId === this.currentUser?.id)) {\n        console.log('Adding sent message to chat:', message);\n        this.messages.push(message);\n        this.scrollToBottom();\n      }\n    });\n    this.subscriptions.push(messageSentSub);\n    // Listen for messages response (when loading conversation history)\n    const messagesSub = this.chatService.onMessages().subscribe(messages => {\n      console.log('Received messages from socket:', messages);\n      this.messages = messages;\n      this.scrollToBottom();\n    });\n    this.subscriptions.push(messagesSub);\n    // Listen for error messages\n    const errorSub = this.chatService.onError().subscribe(error => {\n      console.error('Socket error:', error);\n    });\n    this.subscriptions.push(errorSub);\n  }\n  selectUser(user) {\n    console.log('Selecting user:', user);\n    this.selectedUser = user;\n    this.messages = [];\n    this.newMessage = '';\n    // Save selected user to sessionStorage\n    sessionStorage.setItem('lastSelectedUserId', user.id.toString());\n    if (this.currentUser) {\n      console.log('Loading messages for conversation between', this.currentUser.id, 'and', user.id);\n      this.loadMessagesForUser(user);\n    }\n  }\n  loadMessagesForUser(user) {\n    if (this.currentUser) {\n      this.chatService.getMessagesFromSocket(this.currentUser.id, user.id);\n    }\n  }\n  restoreLastSelectedUser() {\n    const lastSelectedUserId = sessionStorage.getItem('lastSelectedUserId');\n    if (lastSelectedUserId && this.users.length > 0) {\n      const user = this.users.find(u => u.id.toString() === lastSelectedUserId);\n      if (user) {\n        console.log('Restoring last selected user:', user);\n        this.selectedUser = user;\n        this.loadMessagesForUser(user);\n      }\n    }\n  }\n  sendMessage() {\n    if (this.newMessage.trim() && this.selectedUser && this.currentUser) {\n      console.log('Sending message:', {\n        content: this.newMessage.trim(),\n        senderId: this.currentUser.id,\n        receiverId: this.selectedUser.id\n      });\n      this.chatService.sendMessage(this.newMessage.trim(), this.currentUser.id, this.selectedUser.id);\n      this.newMessage = '';\n    }\n  }\n  logout() {\n    console.log('Logout button clicked');\n    this.authService.logout();\n    this.router.navigate(['/auth']);\n  }\n  formatTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n  scrollToBottom() {\n    setTimeout(() => {\n      const messagesContainer = document.querySelector('.chat-messages');\n      if (messagesContainer) {\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n      }\n    }, 100);\n  }\n  static {\n    this.ɵfac = function ChatComponent_Factory(t) {\n      return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.ChatService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatComponent,\n      selectors: [[\"app-chat\"]],\n      decls: 17,\n      vars: 5,\n      consts: [[1, \"chat-container\"], [1, \"chat-header\"], [1, \"btn\", \"btn-secondary\", \"btn-sm\", \"ms-3\", 2, \"cursor\", \"pointer\", \"padding\", \"0.5rem 1rem\", \"background-color\", \"#6c757d\", \"color\", \"white\", \"border\", \"none\", \"border-radius\", \"4px\", 3, \"click\"], [1, \"d-flex\", \"flex-grow-1\"], [1, \"user-list\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [\"class\", \"user-item\", 3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"flex-grow-1\", \"d-flex\", \"flex-column\"], [\"class\", \"d-flex align-items-center justify-content-center h-100\", 4, \"ngIf\"], [\"class\", \"d-flex flex-column h-100\", 4, \"ngIf\"], [1, \"text-muted\"], [1, \"user-item\", 3, \"click\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"fw-bold\"], [1, \"small\", \"text-muted\"], [\"class\", \"unread-badge\", 4, \"ngIf\"], [1, \"unread-badge\"], [1, \"d-flex\", \"align-items-center\", \"justify-content-center\", \"h-100\"], [1, \"text-center\", \"text-muted\"], [1, \"d-flex\", \"flex-column\", \"h-100\"], [1, \"bg-light\", \"p-3\", \"border-bottom\"], [1, \"mb-0\"], [1, \"chat-messages\"], [\"messagesContainer\", \"\"], [\"class\", \"text-center text-muted\", 4, \"ngIf\"], [\"class\", \"message\", 3, \"sent\", \"received\", 4, \"ngFor\", \"ngForOf\"], [1, \"message-input\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Type your message...\", 1, \"form-control\", 3, \"ngModel\", \"disabled\", \"ngModelChange\", \"keyup.enter\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [1, \"message\"], [1, \"message-content\"], [1, \"message-time\", \"small\", \"text-muted\"]],\n      template: function ChatComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\");\n          i0.ɵɵtext(3, \"Chat Application\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\");\n          i0.ɵɵtext(5);\n          i0.ɵɵelementStart(6, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_6_listener() {\n            return ctx.logout();\n          });\n          i0.ɵɵtext(7, \" Logout \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"div\", 3)(9, \"div\", 4)(10, \"h5\");\n          i0.ɵɵtext(11, \"Users\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(12, ChatComponent_div_12_Template, 2, 0, \"div\", 5);\n          i0.ɵɵtemplate(13, ChatComponent_div_13_Template, 8, 5, \"div\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 7);\n          i0.ɵɵtemplate(15, ChatComponent_div_15_Template, 6, 0, \"div\", 8);\n          i0.ɵɵtemplate(16, ChatComponent_div_16_Template, 15, 7, \"div\", 9);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" Welcome, \", ctx.currentUser == null ? null : ctx.currentUser.name, \"! \");\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.users.length === 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.users);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.selectedUser);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedUser);\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgIf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel],\n      styles: [\".unread-badge[_ngcontent-%COMP%] {\\n  background-color: #dc3545;\\n  color: white;\\n  border-radius: 50%;\\n  width: 24px;\\n  height: 24px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: 12px;\\n  font-weight: bold;\\n  min-width: 24px;\\n}\\n\\n.user-item[_ngcontent-%COMP%] {\\n  padding: 12px;\\n  border-bottom: 1px solid #eee;\\n  cursor: pointer;\\n  transition: background-color 0.2s;\\n}\\n\\n.user-item[_ngcontent-%COMP%]:hover {\\n  background-color: #f8f9fa;\\n}\\n\\n.user-item.active[_ngcontent-%COMP%] {\\n  background-color: #e3f2fd;\\n  border-left: 3px solid #2196f3;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdC9jaGF0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDSTtFQUNFLHlCQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtFQUNBLGVBQUE7QUFBTjs7QUFHSTtFQUNFLGFBQUE7RUFDQSw2QkFBQTtFQUNBLGVBQUE7RUFDQSxpQ0FBQTtBQUFOOztBQUdJO0VBQ0UseUJBQUE7QUFBTjs7QUFHSTtFQUNFLHlCQUFBO0VBQ0EsOEJBQUE7QUFBTiIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgIC51bnJlYWQtYmFkZ2Uge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NTtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIHdpZHRoOiAyNHB4O1xuICAgICAgaGVpZ2h0OiAyNHB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgbWluLXdpZHRoOiAyNHB4O1xuICAgIH1cbiAgICBcbiAgICAudXNlci1pdGVtIHtcbiAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycztcbiAgICB9XG4gICAgXG4gICAgLnVzZXItaXRlbTpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xuICAgIH1cbiAgICBcbiAgICAudXNlci1pdGVtLmFjdGl2ZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTNmMmZkO1xuICAgICAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjMjE5NmYzO1xuICAgIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r5","unreadCounts","user_r4","id","ɵɵlistener","ChatComponent_div_13_Template_div_click_0_listener","restoredCtx","ɵɵrestoreView","_r8","$implicit","ctx_r7","ɵɵnextContext","ɵɵresetView","selectUser","ɵɵtemplate","ChatComponent_div_13_div_7_Template","ɵɵclassProp","ctx_r1","selectedUser","ɵɵtextInterpolate","name","email","ɵɵproperty","message_r12","senderId","ctx_r11","currentUser","content","formatTime","createdAt","ChatComponent_div_16_div_8_Template","ChatComponent_div_16_div_9_Template","ChatComponent_div_16_Template_input_ngModelChange_12_listener","$event","_r14","ctx_r13","newMessage","ChatComponent_div_16_Template_input_keyup_enter_12_listener","ctx_r15","sendMessage","ChatComponent_div_16_Template_button_click_13_listener","ctx_r16","ctx_r3","messages","length","trim","ChatComponent","constructor","authService","chatService","router","users","subscriptions","ngOnInit","getCurrentUser","joinChat","setupSocketListeners","loadUsers","loadUnreadCounts","ngOnDestroy","forEach","sub","unsubscribe","disconnect","getAllUsers","subscribe","next","filter","user","restoreLastSelectedUser","error","console","push","getUnreadCounts","counts","log","newMessageSub","onNewMessage","message","receiverId","scrollToBottom","messageSentSub","onMessageSent","messagesSub","onMessages","errorSub","onError","sessionStorage","setItem","toString","loadMessagesForUser","getMessagesFromSocket","lastSelectedUserId","getItem","find","u","logout","navigate","dateString","date","Date","toLocaleTimeString","hour","minute","setTimeout","messagesContainer","document","querySelector","scrollTop","scrollHeight","ɵɵdirectiveInject","i1","AuthService","i2","ChatService","i3","Router","selectors","decls","vars","consts","template","ChatComponent_Template","rf","ctx","ChatComponent_Template_button_click_6_listener","ChatComponent_div_12_Template","ChatComponent_div_13_Template","ChatComponent_div_15_Template","ChatComponent_div_16_Template"],"sources":["/var/www/html/chat-applictaion/frontend/src/app/chat/chat.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService, User } from '../services/auth.service';\nimport { ChatService, Message } from '../services/chat.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-chat',\n  template: `\n    <div class=\"chat-container\">\n      <div class=\"chat-header\">\n        <h3>Chat Application</h3>\n        <div>\n          Welcome, {{ currentUser?.name }}!\n          <button \n            class=\"btn btn-secondary btn-sm ms-3\" \n            (click)=\"logout()\"\n            style=\"cursor: pointer; padding: 0.5rem 1rem; background-color: #6c757d; color: white; border: none; border-radius: 4px;\"\n          >\n            Logout\n          </button>\n        </div>\n      </div>\n      \n      <div class=\"d-flex flex-grow-1\">\n        <!-- User List -->\n        <div class=\"user-list\">\n          <h5>Users</h5>\n          <div *ngIf=\"users.length === 0\" class=\"text-muted\">Loading users...</div>\n          <div\n            *ngFor=\"let user of users\"\n            class=\"user-item\"\n            [class.active]=\"selectedUser?.id === user.id\"\n            (click)=\"selectUser(user)\"\n          >\n            <div class=\"d-flex justify-content-between align-items-center\">\n              <div>\n                <div class=\"fw-bold\">{{ user.name }}</div>\n                <div class=\"small text-muted\">{{ user.email }}</div>\n              </div>\n              <div *ngIf=\"unreadCounts[user.id] > 0\" class=\"unread-badge\">\n                {{ unreadCounts[user.id] }}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Chat Area -->\n        <div class=\"flex-grow-1 d-flex flex-column\">\n          <div *ngIf=\"!selectedUser\" class=\"d-flex align-items-center justify-content-center h-100\">\n            <div class=\"text-center text-muted\">\n              <h4>Select a user to start chatting</h4>\n              <p>Choose someone from the user list to begin your conversation</p>\n            </div>\n          </div>\n\n          <div *ngIf=\"selectedUser\" class=\"d-flex flex-column h-100\">\n            <!-- Chat Header -->\n            <div class=\"bg-light p-3 border-bottom\">\n              <h5 class=\"mb-0\">Chatting with {{ selectedUser.name }}</h5>\n              <small class=\"text-muted\">{{ selectedUser.email }}</small>\n            </div>\n\n            <!-- Messages -->\n            <div class=\"chat-messages\" #messagesContainer>\n              <div *ngIf=\"messages.length === 0\" class=\"text-center text-muted\">\n                No messages yet. Start the conversation!\n              </div>\n              <div\n                *ngFor=\"let message of messages\"\n                class=\"message\"\n                [class.sent]=\"message.senderId === currentUser?.id\"\n                [class.received]=\"message.senderId !== currentUser?.id\"\n              >\n                <div class=\"message-content\">{{ message.content }}</div>\n                <div class=\"message-time small text-muted\">\n                  {{ formatTime(message.createdAt) }}\n                </div>\n              </div>\n            </div>\n\n            <!-- Message Input -->\n            <div class=\"message-input\">\n              <div class=\"input-group\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Type your message...\"\n                  [(ngModel)]=\"newMessage\"\n                  (keyup.enter)=\"sendMessage()\"\n                  [disabled]=\"!selectedUser\"\n                />\n                <button\n                  class=\"btn btn-primary\"\n                  type=\"button\"\n                  (click)=\"sendMessage()\"\n                  [disabled]=\"!newMessage.trim() || !selectedUser\"\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .unread-badge {\n      background-color: #dc3545;\n      color: white;\n      border-radius: 50%;\n      width: 24px;\n      height: 24px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 12px;\n      font-weight: bold;\n      min-width: 24px;\n    }\n    \n    .user-item {\n      padding: 12px;\n      border-bottom: 1px solid #eee;\n      cursor: pointer;\n      transition: background-color 0.2s;\n    }\n    \n    .user-item:hover {\n      background-color: #f8f9fa;\n    }\n    \n    .user-item.active {\n      background-color: #e3f2fd;\n      border-left: 3px solid #2196f3;\n    }\n  `]\n})\nexport class ChatComponent implements OnInit, OnDestroy {\n  currentUser: User | null = null;\n  users: User[] = [];\n  selectedUser: User | null = null;\n  messages: Message[] = [];\n  newMessage = '';\n  unreadCounts: { [senderId: number]: number } = {};\n  \n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private authService: AuthService,\n    private chatService: ChatService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.currentUser = this.authService.getCurrentUser();\n    \n    if (this.currentUser) {\n      // Join chat\n      this.chatService.joinChat(this.currentUser.id);\n      \n      // Set up socket listeners\n      this.setupSocketListeners();\n      \n      // Load users (this will also restore last selected user)\n      this.loadUsers();\n      \n      // Load unread counts\n      this.loadUnreadCounts();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.chatService.disconnect();\n  }\n\n  private loadUsers(): void {\n    const sub = this.chatService.getAllUsers().subscribe({\n      next: (users) => {\n        this.users = users.filter(user => user.id !== this.currentUser?.id);\n        // After users are loaded, try to restore last selected user\n        this.restoreLastSelectedUser();\n      },\n      error: (error) => {\n        console.error('Error loading users:', error);\n      }\n    });\n    this.subscriptions.push(sub);\n  }\n\n  private loadUnreadCounts(): void {\n    const sub = this.chatService.getUnreadCounts().subscribe({\n      next: (counts) => {\n        console.log('Loaded unread counts:', counts);\n        this.unreadCounts = counts;\n      },\n      error: (error) => {\n        console.error('Error loading unread counts:', error);\n      }\n    });\n    this.subscriptions.push(sub);\n  }\n\n  private setupSocketListeners(): void {\n    console.log('Setting up socket listeners for user:', this.currentUser?.id);\n    \n    // Listen for new messages (from other users)\n    const newMessageSub = this.chatService.onNewMessage().subscribe((message: Message) => {\n      console.log('Received new message:', message);\n      if (this.selectedUser && \n          ((message.senderId === this.currentUser?.id && message.receiverId === this.selectedUser.id) ||\n           (message.senderId === this.selectedUser.id && message.receiverId === this.currentUser?.id))) {\n        console.log('Adding message to chat:', message);\n        this.messages.push(message);\n        this.scrollToBottom();\n      }\n    });\n    this.subscriptions.push(newMessageSub);\n\n    // Listen for message sent confirmation (our own messages)\n    const messageSentSub = this.chatService.onMessageSent().subscribe((message: Message) => {\n      console.log('Message sent confirmation:', message);\n      if (this.selectedUser && \n          ((message.senderId === this.currentUser?.id && message.receiverId === this.selectedUser.id) ||\n           (message.senderId === this.selectedUser.id && message.receiverId === this.currentUser?.id))) {\n        console.log('Adding sent message to chat:', message);\n        this.messages.push(message);\n        this.scrollToBottom();\n      }\n    });\n    this.subscriptions.push(messageSentSub);\n\n    // Listen for messages response (when loading conversation history)\n    const messagesSub = this.chatService.onMessages().subscribe((messages: Message[]) => {\n      console.log('Received messages from socket:', messages);\n      this.messages = messages;\n      this.scrollToBottom();\n    });\n    this.subscriptions.push(messagesSub);\n\n    // Listen for error messages\n    const errorSub = this.chatService.onError().subscribe((error) => {\n      console.error('Socket error:', error);\n    });\n    this.subscriptions.push(errorSub);\n  }\n\n  selectUser(user: User): void {\n    console.log('Selecting user:', user);\n    this.selectedUser = user;\n    this.messages = [];\n    this.newMessage = '';\n    \n    // Save selected user to sessionStorage\n    sessionStorage.setItem('lastSelectedUserId', user.id.toString());\n    \n    if (this.currentUser) {\n      console.log('Loading messages for conversation between', this.currentUser.id, 'and', user.id);\n      this.loadMessagesForUser(user);\n    }\n  }\n\n  private loadMessagesForUser(user: User): void {\n    if (this.currentUser) {\n      this.chatService.getMessagesFromSocket(this.currentUser.id, user.id);\n    }\n  }\n\n  private restoreLastSelectedUser(): void {\n    const lastSelectedUserId = sessionStorage.getItem('lastSelectedUserId');\n    if (lastSelectedUserId && this.users.length > 0) {\n      const user = this.users.find(u => u.id.toString() === lastSelectedUserId);\n      if (user) {\n        console.log('Restoring last selected user:', user);\n        this.selectedUser = user;\n        this.loadMessagesForUser(user);\n      }\n    }\n  }\n\n  sendMessage(): void {\n    if (this.newMessage.trim() && this.selectedUser && this.currentUser) {\n      console.log('Sending message:', {\n        content: this.newMessage.trim(),\n        senderId: this.currentUser.id,\n        receiverId: this.selectedUser.id\n      });\n      this.chatService.sendMessage(\n        this.newMessage.trim(),\n        this.currentUser.id,\n        this.selectedUser.id\n      );\n      this.newMessage = '';\n    }\n  }\n\n  logout(): void {\n    console.log('Logout button clicked');\n    this.authService.logout();\n    this.router.navigate(['/auth']);\n  }\n\n  formatTime(dateString: string): string {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n\n  private scrollToBottom(): void {\n    setTimeout(() => {\n      const messagesContainer = document.querySelector('.chat-messages');\n      if (messagesContainer) {\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n      }\n    }, 100);\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}